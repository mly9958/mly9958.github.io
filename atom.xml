<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓烟の博客</title>
  
  <subtitle>我永远喜欢白面鸮</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dxc6r4.coding-pages.com/"/>
  <updated>2020-09-23T10:19:15.864Z</updated>
  <id>https://dxc6r4.coding-pages.com/</id>
  
  <author>
    <name>cc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计两个线程，分别输出数字和字母，输出格式如下1A2B3C...24X25Y26Z</title>
    <link href="https://dxc6r4.coding-pages.com/2020/09/23/%E8%AE%BE%E8%AE%A1%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%88%86%E5%88%AB%E8%BE%93%E5%87%BA%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%EF%BC%8C%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E5%A6%82%E4%B8%8B1A2B3C...24X25Y26Z/"/>
    <id>https://dxc6r4.coding-pages.com/2020/09/23/%E8%AE%BE%E8%AE%A1%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%88%86%E5%88%AB%E8%BE%93%E5%87%BA%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%EF%BC%8C%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E5%A6%82%E4%B8%8B1A2B3C...24X25Y26Z/</id>
    <published>2020-09-22T16:00:00.000Z</published>
    <updated>2020-09-23T10:19:15.864Z</updated>
    
    <content type="html"><![CDATA[<p>近来在面试的时候，遇到一道笔试题很有意思，奈何自己多线程的相关基础太过薄弱，没有答上来，就去搜了一下资料，顺便看了一下马士兵老师的一个视频，在这里总结一下。</p><p>先来看看题干大意</p><p><code>设计两个线程，分别输出数字和字母，输出格式如下1A2B3C...24X25Y26Z</code>，这个题目木主要考察的是线程间的通信，线程一在输入1之后通知线程二输出A，然后线程二通知线程一输出2，如此循环。</p><p>正常情况下我们首先想到的肯定是synchronized加锁，线程一输出1后唤醒线程二，线程一进入等待队列，线程二先等待线程一将其唤醒（防止线程二先运行），输出A后唤醒线程一，如此循环下去。</p><p>其实除了这种方法，还有很多种别的解法，下面我们来一一说到</p><a id="more"></a><h1 id="一、LockSupport解法"><a href="#一、LockSupport解法" class="headerlink" title="一、LockSupport解法"></a>一、LockSupport解法</h1><p>LockSupport是一个线程阻塞工具类，常用的方法主要有两个，一个是park()，一个是unpark()。</p><ul><li>park()：调用park方法后，会暂停当前线程，直到拿到执行，会消耗调unpark给的执行许可。</li><li>unpark(Thread t)：调用unpark方法，可以恢复因为park而暂停的线程，会给线程一个一次性的执行许可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Answer_LockSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Thread one = <span class="keyword">null</span>, two = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        one = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//输出数字</span></span><br><span class="line">                System.out.print(i);</span><br><span class="line">                <span class="comment">//唤醒线程二(给线程二一个执行许可，这个执行许可只能使用一次)</span></span><br><span class="line">                LockSupport.unpark(two);</span><br><span class="line">                <span class="comment">//当前线程等待</span></span><br><span class="line">                LockSupport.park();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"one"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        two = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//为防止线程二先运行，先使当前线程等待，等待线程一那边给执行许可</span></span><br><span class="line">                LockSupport.park();</span><br><span class="line">                <span class="comment">//输出字母</span></span><br><span class="line">                System.out.print(Character.toUpperCase((<span class="keyword">char</span>) (<span class="number">96</span> + i)));</span><br><span class="line">                <span class="comment">//给线程一一个执行许可</span></span><br><span class="line">                LockSupport.unpark(one);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"two"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程调用start方法后，说明线程已经就绪，可以执行了，并不会马上执行，至于先执行哪个线程，是交于cpu决定的</span></span><br><span class="line">        one.start();</span><br><span class="line">        two.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、Synchronized解法"><a href="#二、Synchronized解法" class="headerlink" title="二、Synchronized解法"></a>二、Synchronized解法</h1><p>Synchronized解法应该是比较常见的解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Answer_Synchronized</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为了保证线程的执行顺序，我们使用CountDownLatch，</span></span><br><span class="line"><span class="comment">     * 一般来说，CountDownLatch的值是线程的数量，这里只有两个线程，可以简单使用一下</span></span><br><span class="line"><span class="comment">     * CountDownLatch在多线程并发编程中充当一个计时器的功能，并且维护一个count的变量，并且其操作都是原子操作，</span></span><br><span class="line"><span class="comment">     * 该类主要通过countDown()和await()两个方法实现功能的，</span></span><br><span class="line"><span class="comment">     * 首先通过建立CountDownLatch对象，并且传入参数即为count初始值。</span></span><br><span class="line"><span class="comment">     * 如果一个线程调用了await()方法，那么这个线程便进入阻塞状态，并进入阻塞队列。</span></span><br><span class="line"><span class="comment">     * 如果一个线程调用了countDown()方法，则会使count-1；</span></span><br><span class="line"><span class="comment">     * 当count的值为0时，这时候阻塞队列中调用await()方法的线程便会逐个被唤醒，从而进入后续的操作。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> CountDownLatch cd = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//尝试获取锁对象，每个对象都有一个头部，在对象被synchronized后，头部信息会改变，其他线程看到这个头部信息，就知道被锁定了</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.print(i);</span><br><span class="line">                        <span class="comment">//输出数字后，计数减1到0，线程二进入到await方法下一步</span></span><br><span class="line">                        cd.countDown();</span><br><span class="line">                        <span class="comment">//唤醒其他等待线程的其中一个</span></span><br><span class="line">                        lock.notify();</span><br><span class="line">                        <span class="comment">//当前线程进入等待队列</span></span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 这句一定要加，不然程序会一直挂起</span></span><br><span class="line"><span class="comment">                 * 26Z输出后，线程二wait，线程一循环执行完毕，如果不唤醒线程二，线程二会一直wait</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"one"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//调用CountDownLatch的await方法，等待计数为0，这样线程二就不会先获取到锁对象了</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cd.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.print(Character.toUpperCase((<span class="keyword">char</span>) (<span class="number">96</span> + i)));</span><br><span class="line">                        lock.notify();</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"two"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、lock-condition解法"><a href="#三、lock-condition解法" class="headerlink" title="三、lock.condition解法"></a>三、lock.condition解法</h1><p>lock.condition解法也是一种比较优雅的解法，相比于synchronized解法来说，这个解法可以指定唤醒哪个线程，而synchronized解法只能随机唤醒一个等待的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Answer_Lock_Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明一个可重入锁，使用Lock对象，一定要记得unlock()，不然很容易死锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> CountDownLatch cd = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明两个condition分别给两个线程使用</span></span><br><span class="line">        Condition condition1 = lock.newCondition();</span><br><span class="line">        Condition condition2 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//加锁，其他线程需要等待当前线程释放锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                    System.out.print(i);</span><br><span class="line">                    cd.countDown();</span><br><span class="line">                    <span class="comment">//唤醒使用condition2.await的线程</span></span><br><span class="line">                    condition2.signal();</span><br><span class="line">                    <span class="comment">//当前线程等待，并释放锁</span></span><br><span class="line">                    condition1.await();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//处理最后仍在等待的线程二</span></span><br><span class="line">                condition2.signal();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"one"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//防止线程二先执行</span></span><br><span class="line">                cd.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//加锁，其他线程需要等待当前线程释放锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                    System.out.print(Character.toUpperCase( (<span class="keyword">char</span>) (<span class="number">96</span> + i)));</span><br><span class="line">                    condition1.signal();</span><br><span class="line">                    condition2.await();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"two"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面几种解法都是比较好用的方法，第一种最简单，第二种最常见，第三种最优雅，下面再说几种比较有意思的解法</p><h1 id="四、自旋锁的解法"><a href="#四、自旋锁的解法" class="headerlink" title="四、自旋锁的解法"></a>四、自旋锁的解法</h1><p>所谓自旋锁，是线程在等待的时候，不会释放cpu，所以这种锁只适用于线程数较小的情况下，另外，自旋锁是不经过系统的，速度会有提升</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Answer_Spin_Lock</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里不一定要用枚举，别的类型也可以，主要是为了做一个标识</span></span><br><span class="line">    <span class="keyword">enum</span> ReadyToRun &#123;ONE, TWO&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里使用volatile，是防止脏读，</span></span><br><span class="line"><span class="comment">     * 正常情况下，每个线程都会有自己的工作内存，在修改变量后，会先放在自己的工作内存中，最后在放入主存</span></span><br><span class="line"><span class="comment">     * 在有多个变量同时修改变量的情况下，可能会产生脏读(一个线程修改了变量还未放到主存，另一个线程读取到了还未修改的变量)</span></span><br><span class="line"><span class="comment">     * 使用volatile修饰的变量，在一个线程修改这个变量的时候，另一个线程会立刻感知到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> ReadyToRun r = ReadyToRun.ONE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//如果不是ONE，自旋，不释放cpu</span></span><br><span class="line">                <span class="keyword">while</span> (r != ReadyToRun.ONE)&#123; &#125;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">                r = ReadyToRun.TWO;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"one"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//如果不是ONE，自旋，不释放cpu</span></span><br><span class="line">                <span class="keyword">while</span> (r != ReadyToRun.TWO)&#123; &#125;</span><br><span class="line">                System.out.print(Character.toUpperCase((<span class="keyword">char</span>) (<span class="number">96</span> + i)));</span><br><span class="line">                r = ReadyToRun.ONE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">"two"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、阻塞队列的解法"><a href="#五、阻塞队列的解法" class="headerlink" title="五、阻塞队列的解法"></a>五、阻塞队列的解法</h1><p>这种解法用于发散思维，看看就好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Answer_Blocking_Queue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明两个大小为1的阻塞队列</span></span><br><span class="line"><span class="comment">     * 主要有两个方法</span></span><br><span class="line"><span class="comment">     * put(T t)：往队列里放值，如果队列满了，线程阻塞</span></span><br><span class="line"><span class="comment">     * take()：取队列里的值，如果队列为空，线程阻塞</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> BlockingQueue&lt;String&gt; q1 = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">static</span> BlockingQueue&lt;String&gt; q2 = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    q2.put(<span class="string">"ok"</span>);</span><br><span class="line">                    q1.take();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"one"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//这里为了放值线程二先运行，直接take，此时q2没值，线程阻塞在这里</span></span><br><span class="line">                    q2.take();</span><br><span class="line">                    System.out.print(Character.toUpperCase((<span class="keyword">char</span>) (<span class="number">96</span> + i)));</span><br><span class="line">                    q1.put(<span class="string">"ok"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"two"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、管道流解法"><a href="#六、管道流解法" class="headerlink" title="六、管道流解法"></a>六、管道流解法</h1><p>还有一种解法，是管道流的解法，管道流（PipedStream）是专门为线程间通信设计的，但是很少有人使用，因为这里有很多锁，效率非常低</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Answer_Piped_Stream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 首先声明管道输入输出流</span></span><br><span class="line"><span class="comment">         * 输入流1、输出流1为线程一服务，输入流2、输出流2位线程二服务</span></span><br><span class="line"><span class="comment">         * 输入流1连接输出流2</span></span><br><span class="line"><span class="comment">         * 输入流2连接输出流1</span></span><br><span class="line"><span class="comment">         * 输出流连接输入流后，输出流输出的数据输入流会立即捕捉到</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        PipedInputStream in1 = <span class="keyword">new</span> PipedInputStream();</span><br><span class="line">        PipedInputStream in2 = <span class="keyword">new</span> PipedInputStream();</span><br><span class="line">        PipedOutputStream out1 = <span class="keyword">new</span> PipedOutputStream();</span><br><span class="line">        PipedOutputStream out2 = <span class="keyword">new</span> PipedOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个管道输入流只能对应一个管道输出流</span></span><br><span class="line">        in1.connect(out2);</span><br><span class="line">        in2.connect(out1);</span><br><span class="line"></span><br><span class="line">        String msg = <span class="string">"you turn"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//读取输出流2的输出内容到字节对象buffer，如果输出流2没有输出，会阻塞当前线程</span></span><br><span class="line">                    in1.read(buffer);</span><br><span class="line">                    <span class="keyword">if</span>(msg.equals(<span class="keyword">new</span> String(buffer).trim()))&#123;</span><br><span class="line">                        System.out.print(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//输出流1写入内容供输入流2读取</span></span><br><span class="line">                    out1.write(msg.getBytes());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"one"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//输出流2写入内容供输入流1读取</span></span><br><span class="line">                    out2.write(msg.getBytes());</span><br><span class="line">                    <span class="comment">//读取输出流1的输出内容到字节对象buffer，如果输出流1没有输出，会阻塞当前线程</span></span><br><span class="line">                    in2.read(buffer);</span><br><span class="line">                    <span class="keyword">if</span>(msg.equals(<span class="keyword">new</span> String(buffer).trim()))&#123;</span><br><span class="line">                        System.out.print(Character.toUpperCase((<span class="keyword">char</span>)(<span class="number">96</span>+i)));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"two"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，就这集中解法，后面三种用于发散思维，看看就好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近来在面试的时候，遇到一道笔试题很有意思，奈何自己多线程的相关基础太过薄弱，没有答上来，就去搜了一下资料，顺便看了一下马士兵老师的一个视频，在这里总结一下。&lt;/p&gt;
&lt;p&gt;先来看看题干大意&lt;/p&gt;
&lt;p&gt;&lt;code&gt;设计两个线程，分别输出数字和字母，输出格式如下1A2B3C...24X25Y26Z&lt;/code&gt;，这个题目木主要考察的是线程间的通信，线程一在输入1之后通知线程二输出A，然后线程二通知线程一输出2，如此循环。&lt;/p&gt;
&lt;p&gt;正常情况下我们首先想到的肯定是synchronized加锁，线程一输出1后唤醒线程二，线程一进入等待队列，线程二先等待线程一将其唤醒（防止线程二先运行），输出A后唤醒线程一，如此循环下去。&lt;/p&gt;
&lt;p&gt;其实除了这种方法，还有很多种别的解法，下面我们来一一说到&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="https://dxc6r4.coding-pages.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://dxc6r4.coding-pages.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程间通信" scheme="https://dxc6r4.coding-pages.com/tags/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Mysql中数据表特殊字段问题</title>
    <link href="https://dxc6r4.coding-pages.com/2020/01/03/mysql%E7%89%B9%E6%AE%8A%E5%AD%97%E6%AE%B5%E9%97%AE%E9%A2%98/"/>
    <id>https://dxc6r4.coding-pages.com/2020/01/03/mysql%E7%89%B9%E6%AE%8A%E5%AD%97%E6%AE%B5%E9%97%AE%E9%A2%98/</id>
    <published>2020-01-02T16:00:00.000Z</published>
    <updated>2020-01-03T10:11:05.317Z</updated>
    
    <content type="html"><![CDATA[<p>最近在工作写代码的时候，使用springdatajpa向数据库插入数据时，怎么都插入不进去，一直报语法错误，我检查了字段类型，字段名称，都没有问题。</p><p>最后在网上查阅资料时发现，我数据库表有个字段名称为<code>desc</code>，这个名称和mysql数据库关键字冲突了，导致一直报错，更改为<code>description</code>后正常</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在工作写代码的时候，使用springdatajpa向数据库插入数据时，怎么都插入不进去，一直报语法错误，我检查了字段类型，字段名称，都没有问题。&lt;/p&gt;
&lt;p&gt;最后在网上查阅资料时发现，我数据库表有个字段名称为&lt;code&gt;desc&lt;/code&gt;，这个名称和mysql数据
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://dxc6r4.coding-pages.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://dxc6r4.coding-pages.com/tags/mysql/"/>
    
      <category term="特殊字段" scheme="https://dxc6r4.coding-pages.com/tags/%E7%89%B9%E6%AE%8A%E5%AD%97%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>出师表</title>
    <link href="https://dxc6r4.coding-pages.com/2019/12/21/%E5%87%BA%E5%B8%88%E8%A1%A8/"/>
    <id>https://dxc6r4.coding-pages.com/2019/12/21/%E5%87%BA%E5%B8%88%E8%A1%A8/</id>
    <published>2019-12-20T16:00:00.000Z</published>
    <updated>2019-12-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</p><p>宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</p><p>侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必能裨补阙漏，有所广益。</p><p><img data-src="/assets/%E5%87%BA%E5%B8%88%E8%A1%A8.assets/timg.jpg" alt></p><p>将军向宠，性行淑均，晓畅军事，试用于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</p><a id="more"></a><p>亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</p><p>臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</p><p>先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐托付不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</p><p>愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</p><p>今当远离，临表涕零，不知所言。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。&lt;/p&gt;
&lt;p&gt;宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。&lt;/p&gt;
&lt;p&gt;侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必能裨补阙漏，有所广益。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/assets/%E5%87%BA%E5%B8%88%E8%A1%A8.assets/timg.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;将军向宠，性行淑均，晓畅军事，试用于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。&lt;/p&gt;
    
    </summary>
    
    
      <category term="文言文" scheme="https://dxc6r4.coding-pages.com/categories/%E6%96%87%E8%A8%80%E6%96%87/"/>
    
    
      <category term="古文观止" scheme="https://dxc6r4.coding-pages.com/tags/%E5%8F%A4%E6%96%87%E8%A7%82%E6%AD%A2/"/>
    
      <category term="目的" scheme="https://dxc6r4.coding-pages.com/tags/%E7%9B%AE%E7%9A%84/"/>
    
      <category term="励志" scheme="https://dxc6r4.coding-pages.com/tags/%E5%8A%B1%E5%BF%97/"/>
    
      <category term="劝勉" scheme="https://dxc6r4.coding-pages.com/tags/%E5%8A%9D%E5%8B%89/"/>
    
      <category term="文言文" scheme="https://dxc6r4.coding-pages.com/tags/%E6%96%87%E8%A8%80%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://dxc6r4.coding-pages.com/2019/12/20/hello-world/"/>
    <id>https://dxc6r4.coding-pages.com/2019/12/20/hello-world/</id>
    <published>2019-12-19T16:00:00.000Z</published>
    <updated>2019-12-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="初始文档" scheme="https://dxc6r4.coding-pages.com/categories/%E5%88%9D%E5%A7%8B%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="初始" scheme="https://dxc6r4.coding-pages.com/tags/%E5%88%9D%E5%A7%8B/"/>
    
  </entry>
  
</feed>
